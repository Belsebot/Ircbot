import sys
import socket
import string
import signal
import imp
import os
import thread
import urllib2
import requests
import time
import httplib
import re
from re import findall
from random import randint


bufsize=2048
host="server"
port=6667
name="belsebot"
ident="belsebot"
realname="belsebot"
chan="#channel"

def term_received(sig,frame):
	s.send("PRIVMSG %s :%s\r\n" % (chan,"Jarjestelma Sammutetaan"))
	s.close()
	sys.exit(0)
	return


def check_weather(location):

	key="opentweatherapikey"

	url = "https://api.openweathermap.org/data/2.5/weather?q={}&units=metric&appid={}".format(location,key)
	r = requests.get(url)

	data=r.json()

	if data["cod"] != "404":

		a=data["main"]
		temp=a["temp"]
		humi=a["humidity"]

	else:
		temp="0"
		humi="0"

	return temp,humi


def checksize(uri):
#	print "checksize"
	headers={ 'User-Agent' : 'Mozilla/5.0' }
	try:
		req=urllib2.Request(uri,None,headers)
		check=0

		try:
			file=urllib2.urlopen(req,timeout=4)
			size=file.headers.get("content-length")
			file.close()
			if size==None:
				size=0
		except urllib2.HTTPError,e:
			print e
			size=0
		except urllib2.URLError,e:
			print e
			size=-1
		return int(size)

	except httplib.HTTPException:
		size=-1
		return int(size)

def etsi_title(a):
#	print "etsititle"
	first="<meta property=\"og:title\" content=\""
	last="\""

	try:
		start=a.index(first) + len(first)
		end=a.index(last, start)
		return a[start:end]
	except ValueError:
		return ""


def filter_title(title):
	mappaus={'&#034;':'"',
		'&quot;':'"',
		'http://':'meep',
		'https://':'meep',
		'&amp;':'&',
		'&#39;':'\'',
		'&#8211;':'-'}

	if (title != None):
		for a,b in mappaus.iteritems():
			title=title.replace(a,b)
	else:
		title="No title found"

	return title

def avaaurl(osoite):
#	print "avaaurl"

	headers={ 'User-Agent' : 'Mozilla/5.0' }
	req=urllib2.Request(osoite,None,headers)

	try:
		f=urllib2.urlopen(req)
		ots=f.read()
		f.close

		otsikko = etsi_title(ots)
		filter = re.sub("\n\s*","",otsikko)

		return filter

	except urllib2.HTTPError,e:
		print "vamma esto",e


def ircconnect(host,port,name,ident,realname,chan):
	global s
	s=socket.socket()
	s.settimeout(400)

	try:
		s.connect((host, port))
		print "Ircconnect"
		s.send("NICK %s\r\n" % name)
		s.send("USER %s %s bla :%s\r\n" % (ident, host, realname))
		s.send("JOIN :%s\r\n" % chan)
		ircloop()
	except (socket.error,socket.timeout) as err2:
		print "Connection failed"
#		print "meep %s" % Exception
		print err2
		s.close()
		time.sleep(200)
		ircconnect(host,port,name,ident,realname,chan)


def viisaudet():
	global lista
	global vituttaa
	global utstats
	global viisaus_num

	file='words of wisdom text file location'

	f=open(file,'r')
	lista=f.readlines()
	f.close()
	viisaus_num=len(lista)

	vituttaa="Jos vituttaa niin mita siita suotta virtta vaantaamaan kun metsa on taynna paksu oksaisia mantyja"
	utstats="Mita niita suotta katsomaan kun tiedetaan etta Belse on paras"


def ircloop():
#	print "Ircloop"
	check=0
	msg = [None]*5
	msg[0]=".gif"
	msg[1]=".pdf"
	msg[2]=".jpg"
	msg[3]=":8000/"
	msg[4]=":80/"

	viisaudet()

	while 1:
		try:

			ircmsg = s.recv (bufsize)

			if len(ircmsg) == 0:
				break

			ircmsg = ircmsg.strip('\n\r')

#			print ircmsg

			if ircmsg.find ("PING :") != -1:
				s.send("PONG :pingis\n")

			urls = findall("http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", ircmsg)

			if urls:
#				print urls[0]

				if msg[0] in urls[0]:
					s.send("PRIVMSG %s :%s\r\n" % (chan,"onkos toi nyt sitten joku gif"))
				elif msg[1] in urls[0]:
					s.send("PRIVMSG %s :%s\r\n" % (chan,"ei tassa nyt romaaneja ruveta lukemaan"))
				elif msg[2] in urls[0]:
					s.send("PRIVMSG %s :%s\r\n" % (chan,"toi on kylla jpg"))
				elif msg[3] in urls[0]:
					s.send("PRIVMSG %s :%s\r\n" % (chan,"puuuuh"))
				elif msg[4] in urls[0]:
					s.send("PRIVMSG %s :%s\r\n" % (chan,"puuuuuuh"))
				else:

					koko=checksize(urls[0])
					if koko != -1:
						maxsize=1000000
						print koko
						print urls[0]
						if koko>maxsize:
							s.send("PRIVMSG %s :%s\r\n" % (chan, "Liian iso"))
						else:
							viesti=avaaurl(urls[0])
							viesti=filter_title(viesti)
							if viesti:
								s.send("PRIVMSG %s :%s\r\n" % (chan, viesti))
							else:
								s.send("PRIVMSG %s :%s\r\n" % (chan, "No title found"))
					else:
						s.send("PRIVMSG %s :%s\r\n" % (chan, "Timeout tai joku vammainen badstatus tai muu vastaava"))

			if ircmsg.find("!viisaus") != -1:
				num=randint(0,viisaus_num-1)
				s.send("PRIVMSG %s :%s\r\n" % (chan, lista[num]))

			if ircmsg.find("!temp") != -1:
				try:
					kaupunki = ircmsg.split()

					lampo,kosteus=check_weather(kaupunki[4])
					saa=paikka+" lampotila:" + str(lampo) + " kosteus:" + str(kosteus)
					s.send("PRIVMSG %s :%s\r\n" % (chan, saa))
				except:
					print ircmsg

			if ircmsg.find("!vituttaa") != -1:
				s.send("PRIVMSG %s :%s\r\n" % (chan, vituttaa))

			if ircmsg.find("!utstat") != -1:
				s.send("PRIVMSG %s :%s\r\n" % (chan, utstats))

			if ircmsg.find(":Belse!") != -1:
				try:
					komento = ircmsg.split(':',2)
					if komento[2]=="!quit":
						s.send("PRIVMSG %s :%s\r\n" % (chan, "Heippa"))
						print "sammutetaan bot"
						s.close()
						break
					if komento[2]=="!reload":
						viisaudet()
						print "Viisaudet paivitetty"
				except:
					print ircmsg


		except (socket.timeout,socket.error) as err:
			print "Virhe 2"
			print err
			time.sleep(200)
			ircconnect(host,port,name,ident,realname,chan)

	print "Ohjelma loppui"
	s.close()

if __name__ == "__main__":

	print "Ircbot launch"
	signal.signal(signal.SIGTERM, term_received)

	ircconnect(host,port,name,ident,realname,chan)


	print "Ohjelma loppui2"
	s.close()
